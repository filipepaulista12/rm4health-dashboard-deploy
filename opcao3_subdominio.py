#!/usr/bin/env python3
"""
OP√á√ÉO 3 - SUBDOM√çNIO DEDICADO PARA RM4HEALTH
============================================

Criar: rm4health.ciis.fmrp.usp.br
- Configura√ß√£o independente
- Sem interferir com site principal
- Mais profissional
"""

import paramiko
import time

def criar_subdominio_dedicado():
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect('200.144.254.4', port=22, username='ubuntu', password='vFpyJS4FA')
    
    print("üåê CRIANDO SUBDOM√çNIO DEDICADO: rm4health.ciis.fmrp.usp.br")
    print()
    
    # 1. Criar configura√ß√£o do subdom√≠nio
    config_subdominio = """<VirtualHost *:80>
    ServerName rm4health.ciis.fmrp.usp.br
    DocumentRoot /var/www/html/rm4health
    
    # Proxy para Flask no port 8080
    ProxyPreserveHost On
    ProxyRequests Off
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
    
    # Logs espec√≠ficos do subdom√≠nio
    ErrorLog ${APACHE_LOG_DIR}/rm4health_error.log
    CustomLog ${APACHE_LOG_DIR}/rm4health_access.log combined
    
    # Headers de seguran√ßa
    Header always set X-Frame-Options DENY
    Header always set X-Content-Type-Options nosniff
</VirtualHost>"""
    
    # Criar o arquivo de configura√ß√£o
    stdin, stdout, stderr = ssh.exec_command(f"""
sudo tee /etc/apache2/sites-available/rm4health-subdomain.conf > /dev/null << 'EOF'
{config_subdominio}
EOF
    """)
    stdout.read()
    print("‚úÖ Configura√ß√£o do subdom√≠nio criada")
    
    # 2. Habilitar m√≥dulos necess√°rios
    modules = ['proxy', 'proxy_http', 'headers']
    for module in modules:
        stdin, stdout, stderr = ssh.exec_command(f'sudo a2enmod {module}')
        result = stdout.read().decode()
        print(f"üì¶ M√≥dulo {module}: {result.strip() if result else 'OK'}")
    
    # 3. Habilitar o site
    stdin, stdout, stderr = ssh.exec_command('sudo a2ensite rm4health-subdomain.conf')
    result = stdout.read().decode()
    print(f"üîß Habilitando subdom√≠nio: {result}")
    
    # 4. Testar configura√ß√£o
    stdin, stdout, stderr = ssh.exec_command('sudo apache2ctl configtest')
    config_out = stdout.read().decode()
    config_err = stderr.read().decode()
    
    if 'Syntax OK' in config_err:
        print("‚úÖ Configura√ß√£o OK")
        
        # 5. Recarregar Apache
        stdin, stdout, stderr = ssh.exec_command('sudo systemctl reload apache2')
        stdout.read()
        print("üîÑ Apache recarregado")
        
        time.sleep(2)
        
        # 6. Verificar se Apache ainda est√° ativo
        stdin, stdout, stderr = ssh.exec_command('systemctl is-active apache2')
        status = stdout.read().decode().strip()
        print(f"Status Apache: {status}")
        
        if status == 'active':
            print("üéâ SUBDOM√çNIO CONFIGURADO COM SUCESSO!")
            print()
            print("üìã PR√ìXIMOS PASSOS:")
            print("1. Configurar DNS: rm4health.ciis.fmrp.usp.br ‚Üí 200.144.254.4")
            print("2. Iniciar dashboard Flask na porta 8080")
            print("3. Acessar: http://rm4health.ciis.fmrp.usp.br")
            
            # Verificar se Flask est√° rodando
            stdin, stdout, stderr = ssh.exec_command('ps aux | grep python3 | grep 8080')
            flask_proc = stdout.read().decode()
            if flask_proc.strip():
                print("‚úÖ Flask j√° est√° rodando na porta 8080")
            else:
                print("‚ö†Ô∏è  Flask precisa ser iniciado na porta 8080")
                
        else:
            print(f"‚ùå Problema com Apache: {status}")
    else:
        print(f"‚ùå Erro na configura√ß√£o: {config_err}")
    
    ssh.close()

if __name__ == "__main__":
    criar_subdominio_dedicado()
